EventEmitter = require("events").EventEmitter

_ = require('lodash')
util = require('../../core/util')

class PaperTrader extends EventEmitter
  constructor: ->
    _.bindAll @
    config = util.getConfig()

    @fee = 1 - (config.paperTrader['fee' + config.paperTrader.feeUsing.charAt(0).toUpperCase() + config.paperTrader.feeUsing.slice(1)] + config.paperTrader.slippage) / 100
    @currency = config.watch.currency
    @asset = config.watch.asset
    @portfolio =
      asset: config.paperTrader.simulationBalance.asset
      currency: config.paperTrader.simulationBalance.currency
      balance: false

  _extractFee: (amount) ->
    #console.log "extractfee", amount
    amount *= 1e8
    amount *= @fee
    amount = Math.floor(amount)
    amount /= 1e8
    #console.log "extractfee", amount
    amount

  processAdvice: (advice) =>
    #console.log "processAdvice",  advice
    if advice.recommendation == 'soft'
      return

    price = advice.candle.close
    # virtually trade all {currency} to {asset}
    # at the current price (minus fees)
    portfolioBefore = _.clone @portfolio
    if advice.recommendation is 'long'
      withFee = @_extractFee @portfolio.currency / price
      thisFee = (@portfolio.currency / price - withFee) * price
      @portfolio.asset += withFee
      @portfolio.currency = 0
      action = 'buy'
    else if advice.recommendation is 'short'
      withFee = @_extractFee @portfolio.asset * price
      thisFee = @portfolio.asset * price - withFee
      @portfolio.currency += withFee
      @portfolio.asset = 0
      action = 'sell'
    else
      return

    @trades++
    @portfolio.balance = @portfolio.currency + price * @portfolio.asset

    @emit 'trade',
      action: action
      price: price
      portfolio: _.clone @portfolio
      portfolioBefore: portfolioBefore
      date: advice.candle.start
      fee: thisFee

  processCandle: (candle, done) ->
    #console.log "processCandle",  candle.close
    @price = candle.close

    if not @portfolio.balance
      @portfolio.balance = @portfolio.currency + @price * @portfolio.asset
      @emit 'portfolioUpdate', _.clone(@portfolio)

    done()

module.exports = PaperTrader

# ---
# generated by js2coffee 2.2.0
